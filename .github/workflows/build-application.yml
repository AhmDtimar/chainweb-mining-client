name: Build and publish application binaries

on: [push]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.8.4', '8.10.2']
        cabal: ['3.2.0.0']
        os: ['ubuntu-18.04', 'ubuntu-20.04', 'macOS-10.14']
        cabalcache: ['true']
    env:
      ARTIFACT_BUCKET: kadena-cabal-cache
      ARTIFACT_FOLDER: test-miner

    steps:

    # Setup
    - name: Checkout repository
      uses: actions/checkout@v2.2.0
    - name: Create env variables for git objects
      run: |
        echo "::set-env name=IS_RELEASE::${{ contains(github.event_name, 'release') }}"
        echo "::set-env name=GIT_REF_SHORT::${GITHUB_REF#refs/heads/}"
        echo "::set-env name=GIT_HEAD_REF_SHORT::${GITHUB_HEAD_REF#refs/heads/}"
        echo "::set-env name=GIT_SHA_SHORT::$(git rev-parse --short HEAD || true)"
    - name: Install GHC and Cabal
      uses: actions/setup-haskell@v1.1.2
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Confirm GHC and Cabal installation
      run: |
        ghc --version
        cabal --version
    - uses: actions/cache@v1
      name: Cache dist-newstyle
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle

    # Build
    - name: Update package database
      run: cabal v2-update
    - name: Configure build
      run: |
        cabal v2-build all --dry-run
        cabal v2-freeze
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      uses: larskuhtz/cabal-cache-action@21220b9f6499bb12cb0b4b926d6faa9c46a7b146
      with:
        bucket: "kadena-cabal-cache"
        region: "us-east-1"
        folder: "${{ matrix.os }}"
        aws_access_key_id: "${{ secrets.kadena_cabal_cache_aws_access_key_id }}"
        aws_secret_access_key: "${{ secrets.kadena_cabal_cache_aws_secret_access_key }}"
    - name: Install build dependencies
      run: cabal v2-build --only-dependencies
    - name: Build
      run: cabal v2-build test-miner

    # Publish Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/applications
        export VER=$(grep '^version' test-miner.cabal | sed -e 's/.*: *//')
        cp $(find dist-newstyle/ -name 'test-miner' -type f) artifacts/applications
        cp README.md artifacts/applications
        cp CHANGELOG.md artifacts/applications
        cp LICENSE artifacts/applications
        cp test-miner.cabal artifacts/applications
        cp cabal.project artifacts/applications
        cp cabal.project.freeze artifacts/applications
    - name: Strip Binary
      run: strip artifacts/applications/test-miner
    - name: Safe artifacts
      uses: actions/upload-artifact@v2
      with:
        name: test-miner.${{ matrix.ghc }}.${{ matrix.os }}
        path: artifacts/applications

    # Publish to S3
    - name: Define S3 locations
      if: always()
      run: |
        echo "::set-env name=BINFILE::test-miner.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_SHA_SHORT }}.tar.gz"
        echo "::set-env name=BRANCH_BINFILE::test-miner.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_REF_SHORT }}.tar.gz"
        echo "::set-env name=TAG_BINFILE::test-miner.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_TAG }}.tar.gz"

    # Publish artifacts to S3
    - name: Publish to S3
      run: |
        tar -C ./artifacts/applications/ -czf $BINFILE test-miner
        echo "aws s3 cp $BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/"
        aws s3 cp "$BINFILE" "s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/"
        echo "aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$BINFILE --acl public-read"
        aws s3api put-object-acl --bucket "$ARTIFACT_BUCKET" --key="$ARTIFACT_FOLDER/$BINFILE" --acl public-read
    - name: Publish to S3 for master builds
      if: env.GIT_REF_SHORT == 'master'
      run: |
        aws s3 cp s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BRANCH_BINFILE
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$BRANCH_BINFILE --acl public-read
    - name: Publish to S3 for release tag builds
      if: contains(github.event_name, 'release') || startsWith(env.GIT_TAG, '1.')
      run: |
        aws s3 cp s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$TAG_BINFILE
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$TAG_BINFILE --acl public-read

